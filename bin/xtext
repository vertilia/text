#!/usr/bin/env php
<?php

include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

use PhpParser\Node;
use PhpParser\NodeDumper;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;
use PhpParser\ParserFactory;
use Vertilia\Text\PoDomain;

$params = getopt('hx:i:c:', [], $last_opt);

if ($last_opt >= $argc or isset($params['h'])) {
    printf(
        <<<'EOT'
        Usage: %1$s [OPTIONS] FILES,
        OPTIONS:
        -h      Display usage message and quit
        -x EXCLUDE_PATH
                Pattern to exclude when scanning FILES, may be repeated to
                provide multiple patterns. Executes before -i.
        -i INCLUDE_PATH
                Pattern to include when scanning FILES, may be repeated to
                provide multiple paths. Executes after -x. Default: *
        -c COMMENT_TAG
                Comment tag to mark extractable comments from the source code.
                Use empty string to extract all comments
        FILES:
                A list of one or more file or directory. If directory names are
                specified, they are scanned recursively. Options -x and -i are
                used to limit processed files.
        EXAMPLES:
        %1$s *.php
                Scan all .php files in current dir
        %1$s -c '' *.php
                Scan all .php files in current dir, also extract comments
        %1$s -x /*/vendor -x /*/tests -i '*.php' -c TRANSLATORS: /app >msg.pot
                Scan all .php files in /app directory and sub-directories,
                excluding vendor and tests folders, extract comments starting
                with TRANSLATORS: tag and write output to msg.pot file

        EOT,
        basename($argv[0])
    );
    die();
}

$exclude = isset($params['x']) ? (array)$params['x'] : [];
$include = isset($params['i']) ? (array)$params['i'] : ['*'];
$comment = isset($params['c']) ? ($params['c'] === false ? true : $params['c']) : null;

$acceptor_fn = function ($current, $path) use ($exclude, $include) {
    $skip = false;
    foreach ($exclude as $excl) {
        if (fnmatch($excl, $path)) {
            $skip = true;
            break;
        }
    }

    if (!$skip and $current->isFile()) {
        $skip = true;
        foreach ($include as $incl) {
            if (fnmatch($incl, $path)) {
                $skip = false;
                break;
            }
        }
    }

    return !$skip;
};

class Php2PoVisitor extends NodeVisitorAbstract
{
    protected PoDomain $po_file;
    private string $src_file;
    private array $last_comments = [];
    private int $last_comments_line = 0;

    public function __construct(PoDomain $po_file, string $src_file)
    {
        $this->po_file = $po_file;
        $this->src_file = $src_file;
    }

    public function stringFromConcat(Node $value): ?string
    {
        if ($value instanceof Node\Expr\BinaryOp\Concat) {
            $str_left = $value->left;
            $str_right = $value->right;

            // verify left
            if ($str_left instanceof Node\Expr\BinaryOp\Concat) {
                $str_left = $this->stringFromConcat($str_left);
            } elseif ($str_left instanceof Node\Scalar\String_) {
                $str_left = $str_left->value;
            } else {
                return null;
            }

            // verify right
            if ($str_right instanceof Node\Expr\BinaryOp\Concat) {
                $str_right = $this->stringFromConcat($str_right);
            } elseif ($str_right instanceof Node\Scalar\String_) {
                $str_right = $str_right->value;
            } else {
                return null;
            }

            // both parts are strings
            if (is_string($str_left) and is_string($str_right)) {
                return "$str_left$str_right";
            }

            return null;
        }

        return null;
    }

    public function stringArg(Node $value): ?string
    {
        if ($value instanceof Node\Scalar\String_) {
            return $value->value;
        } elseif ($value instanceof Node\Expr\BinaryOp\Concat) {
            return $this->stringFromConcat($value);
        } else {
            return null;
        }
    }

    public function enterNode(Node $node): void
    {
        $last_comments = $node->getAttribute('comments');
        if ($last_comments) {
            $last = end($last_comments);
            $last_comments_line = $last->getEndLine();
            $this->last_comments = $last_comments;
            $this->last_comments_line = $last_comments_line;
        } else {
            $last_comments = $this->last_comments;
            $last_comments_line = $this->last_comments_line;
        }

        if ($node instanceof Node\Expr\StaticCall
            or $node instanceof Node\Expr\MethodCall
            or $node instanceof Node\Expr\FuncCall
        ) {
            if ($node->name instanceof Node\Name) {
                $parts = $node->name->getParts();
                $fn = $parts[array_key_last($parts)];
            } else {
                $fn = $node->name;
            }

            if (empty($last_comments_line) or $last_comments_line < $node->getStartLine() - 1) {
                $last_comments = [];
            }

            $src = $this->src_file . ':' . $node->getAttribute('startLine');
            switch ($fn) {
                case 'gettext':
                case '_':
                    // arguments: 1
                    $msgid = $this->stringArg($node->args[0]->value);
                    $comment1 = $node->args[0]->getAttribute('comments') ?: [];
                    if (null !== $msgid) {
                        $this->po_file->addMsg([
                            '#.' => array_merge($last_comments, $comment1),
                            '#:' => $src,
                            'msgid' => $msgid,
                            'msgstr' => '',
                        ]);
                    }
                    break;
                case 'nget':
                case 'ngettext':
                    // arguments: 1,2
                    $msgid = $this->stringArg($node->args[0]->value);
                    $comment1 = $node->args[0]->getAttribute('comments') ?: [];
                    $msg_plural = $this->stringArg($node->args[1]->value);
                    $comment2 = $node->args[1]->getAttribute('comments') ?: [];
                    if (null !== $msgid and null !== $msg_plural) {
                        $this->po_file->addMsg([
                            '#.' => array_merge($last_comments, $comment1, $comment2),
                            '#:' => $src,
                            'msgid' => $msgid,
                            'msgid_plural' => $msg_plural,
                            'msgstr' => ['', ''],
                        ]);
                    }
                    break;
                case 'pget':
                case 'pgettext':
                    // arguments: 1c,2
                    $msgctxt = $this->stringArg($node->args[0]->value);
                    $msgid = $this->stringArg($node->args[1]->value);
                    $comment1 = $node->args[1]->getAttribute('comments') ?: [];
                    if (null !== $msgctxt and null !== $msgid) {
                        $this->po_file->addMsg([
                            '#.' => array_merge($last_comments, $comment1),
                            '#:' => $src,
                            'msgctxt' => $msgctxt,
                            'msgid' => $msgid,
                            'msgstr' => '',
                        ]);
                    }
                    break;
                case 'npget':
                case 'npgettext':
                    // arguments: 1c,2,3
                    $msgctxt = $this->stringArg($node->args[0]->value);
                    $msgid = $this->stringArg($node->args[1]->value);
                    $comment1 = $node->args[1]->getAttribute('comments') ?: [];
                    $msg_plural = $this->stringArg($node->args[2]->value);
                    $comment2 = $node->args[2]->getAttribute('comments') ?: [];
                    if (null !== $msgctxt and null !== $msgid and null !== $msg_plural) {
                        $this->po_file->addMsg([
                            '#.' => array_merge($last_comments, $comment1, $comment2),
                            '#:' => $src,
                            'msgctxt' => $msgctxt,
                            'msgid' => $msgid,
                            'msgid_plural' => $msg_plural,
                            'msgstr' => ['', ''],
                        ]);
                    }
                    break;
                case 'dgettext':
                case 'dcgettext':
                    // arguments: 2
                    $msgid = $this->stringArg($node->args[1]->value);
                    $comment1 = $node->args[1]->getAttribute('comments') ?: [];
                    if (null !== $msgid) {
                        $this->po_file->addMsg([
                            '#.' => array_merge($last_comments, $comment1),
                            '#:' => $src,
                            'msgid' => $msgid,
                            'msgstr' => '',
                        ]);
                    }
                    break;
                case 'dngettext':
                case 'dcngettext':
                    // arguments: 2,3
                    $msgid = $this->stringArg($node->args[1]->value);
                    $comment1 = $node->args[1]->getAttribute('comments') ?: [];
                    $msg_plural = $this->stringArg($node->args[2]->value);
                    $comment2 = $node->args[2]->getAttribute('comments') ?: [];
                    if (null !== $msgid and null !== $msg_plural) {
                        $this->po_file->addMsg([
                            '#.' => array_merge($last_comments, $comment1, $comment2),
                            '#:' => $src,
                            'msgid' => $msgid,
                            'msgid_plural' => $msg_plural,
                            'msgstr' => ['', ''],
                        ]);
                    }
                    break;
                default:
                    $msgid = null;
            }

            if ($msgid) {
                $this->last_comments = [];
                $this->last_comments_line = 0;
            }
        }
    }
}

$parser = (new ParserFactory())->createForHostVersion();
$dumper = new NodeDumper();
$po_domain = new PoDomain($comment);

function transform_file(string $filename)
{
    global $po_domain, $parser, $dumper;

    $traverser = new NodeTraverser();
    $traverser->addVisitor(new Php2PoVisitor($po_domain, $filename));

    $ast = $parser->parse(file_get_contents($filename));
    $traverser->traverse($ast);
//    echo $dumper->dump($ast), "\n";
}

for ($i = $last_opt; isset($argv[$i]); $i++) {
    if (is_dir($argv[$i])) {
        foreach (
            new RecursiveIteratorIterator(
                new RecursiveCallbackFilterIterator(
                    new RecursiveDirectoryIterator($argv[$i], FilesystemIterator::SKIP_DOTS),
                    $acceptor_fn
                )
            )
            as $file
        ) {
            transform_file($file->getPathname());
        }
    } elseif (is_file($argv[$i])) {
        transform_file($argv[$i]);
    } else {
        fprintf(STDERR, "ERROR: cannot access %s on filesystem", $argv[$i]);
        die();
    }

    echo $po_domain;
}
